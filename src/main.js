const {HtmlTelegramBot, userInfoToString} = require("./bot");
const ChatGptService = require("./gpt");

class MyTelegramBot extends HtmlTelegramBot {
    constructor(token) {
        super(token);
        this.mode = null;
        this.list = [];
        this.user = {};
        this.count = 0;
    }

    async date(msg) {
        this.mode = 'date'
        await this.sendImage('date')
        await this.sendTextButtons(this.loadMessage('date'), {
            'date_grande': '–ê—Ä–∏–∞–Ω–∞ –ì—Ä–∞–Ω–¥–µ',
            'date_robbie': '–ú–∞—Ä–≥–æ –†–æ–±–±–∏',
            'date_zendaya': '–ó–µ–Ω–¥–µ—è',
            'date_gosling': '–†–∞–π–∞–Ω –ì–æ—Å–ª–∏–Ω–≥',
            'date_hardy': '–¢–æ–º –•–∞—Ä–¥–∏',
        })
    }

    async dateButton(callbackQuery) {
        const data = callbackQuery.data
        await this.sendImage(data)
        let name = ''
        if (data === 'date_grande') {
            name = '–ê—Ä–∏–∞–Ω—É –ì—Ä–∞–Ω–¥–µ'
        } else if (data === 'date_robbie') {
            name = '–ú–∞—Ä–≥–æ –†–æ–±–±–∏'
        } else if (data === 'date_zendaya') {
            name = '–ó–µ–Ω–¥–∞–π—é'
        } else if (data === 'date_gosling') {
            name = '–†–∞–π–∞–Ω–∞ –ì–æ—Å–ª–∏–Ω–≥–∞'
        } else if (data === 'date_hardy') {
            name = '–¢–æ–º–∞ –•–∞—Ä–¥–∏'
        }
        await this.sendText(`–ü—Ä–∏–≥–ª–∞—Å–∏ –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ ${name} –∑–∞ 5 —Å–æ–æ–±—â–µ–Ω–∏–π! `)
        const prompt = this.loadPrompt(data)
        chatGpt.setPrompt(prompt);
    }

    async dateDialog(msg) {
        const text = msg.text;
        const message = await this.sendText('–Ω–∞–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ...')
        const response = await chatGpt.addMessage(text)
        await this.editText(message, response)
    }

    async message() {
        this.mode = 'message'
        this.list = []
        await this.sendImage('message')
        await this.sendTextButtons(this.loadMessage('message'), {
            "message_next": "–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            "message_date": "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ"
        })
    }

    async messageButton(callbackQuery) {
        console.log(this.list)
        const query = callbackQuery.data
        const prompt = this.loadPrompt(query)
        const userChatHistory = this.list.join('\n\n');
        const message = await this.sendText('ChatGPT –Ω–∞–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç ...')
        console.log(prompt, userChatHistory)
        const response = await chatGpt.sendQuestion(prompt, userChatHistory)
        await this.editText(message, response)
        this.list.push(response)
    }

    async messageDialog(msg) {
        const text = msg.text

        // const message = await this.sendText('–Ω–∞–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ...')
        // const response = await chatGpt.addMessage(text)

        this.list.push(text)
    }

    async profile() {
        this.count = 0
        this.user = {}
        this.mode = 'profile'
        await this.sendImage('profile')
        await this.sendText(this.loadMessage('profile'))
        await this.sendText('–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?')

    }

    async profileDialog(msg) {
        const text = msg.text
        this.count++
        if (this.count === 1) {
            this.user['age'] = text
            await this.sendText('–ö–µ–º –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?')
        }
        if (this.count === 2) {
            this.user['occupation'] = text
            await this.sendText('–£ –≤–∞—Å –µ—Å—Ç—å —Ö–æ–±–±–∏?')
        }
        if (this.count === 3) {
            this.user['hobby'] = text
            await this.sendText('–ß—Ç–æ –≤–∞–º –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ –ª—é–¥—è—Ö?')
        }
        if (this.count === 4) {
            this.user['annoys'] = text
            await this.sendText('–¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?')
        }
        if (this.count === 5) {
            this.user['goals'] = text

            const prompt = this.loadPrompt('profile')
            const info = userInfoToString(this.user)
            const message = await this.sendText('ChatGPT –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å ...')
            const answer = await chatGpt.sendQuestion(prompt, info)

            await this.editText(message, answer)
        }


    }

    async opener() {
        this.mode = 'opener'
        this.user = {}
        this.count = 0
        await this.sendImage('opener')
        await this.sendText(this.loadMessage('opener'))
        await this.sendText('–ò–º—è?')
    }

    async openerDialog(msg) {
        const text = msg.text
        this.count++
        if (this.count === 1) {
            this.user['name'] = text
            await this.sendText('–°–∫–æ–ª—å–∫–æ –µ–π –ª–µ—Ç')
        }
        if (this.count === 2) {
            this.user['age'] = text
            await this.sendText('–û—Ü–µ–Ω–∏—Ç–µ –≤–Ω–µ—à–Ω–æ—Å—Ç—å: 1-10 –±–∞–ª–ª–æ–≤?')
        }
        if (this.count === 3) {
            this.user['handsome'] = text
            await this.sendText('–ö–µ–º —Ä–∞–±–æ—Ç–∞–µ—Ç?')
        }
        if (this.count === 4) {
            this.user['occupation'] = text
            await this.sendText('–¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?')
        }
        if (this.count === 5) {
            this.user['goals'] = text
            const prompt = this.loadPrompt('opener')
            const info = userInfoToString(this.user)
            const message = await this.sendText('ChatGPT –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–µ–Ω–µ—Ä ...')
            const answer = await chatGpt.sendQuestion(prompt, info)
            await this.editText(message, answer)
        }
    }

    async gpt(msg) {
        this.mode = 'gpt'
        await this.sendText('–ü–æ–æ–±—â–∞–µ–º—Å—è —Å –ò–ò')
        await this.sendImage('gpt')
        await this.sendText(this.loadMessage('gpt'))
    }

    async gptDialog(msg) {
        const text = msg.text;
        const message = await this.sendText('–Ω–∞–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ ...')
        const response = await chatGpt.sendQuestion('–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å', text)
        await this.editText(message, response)
    }

    async start() {
        this.mode = 'start'
        await this.sendImage('main')
        const text = this.loadMessage('main')
        await this.sendText(text)

        //show menu
        await this.showMainMenu({
            'start': '–ù–∞—á–∞—Ç—å',
            'gpt': '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT üß†',
            'profile': '*–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Tinder-–ø—Ä–æ—Ñ–∏–ª—è üòé',
            'opener ': '*–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ ü•∞',
            'message': '*–ü–µ—Ä–µ–ø–∏—Å–∫–∞ –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ üòà',
            'date': '*–ü–µ—Ä–µ–ø–∏—Å–∫–∞ —Å–æ –∑–≤–µ–∑–¥–∞–º–∏ üî•'
        })
    }

    async hello(msg) {
        if (this.mode === 'gpt') {
            await this.gptDialog(msg)
        } else if (this.mode === 'date') {
            await this.dateDialog(msg)
        } else if (this.mode === 'message') {
            await this.messageDialog(msg)
        } else if (this.mode === 'profile') {
            await this.profileDialog(msg)
        } else if (this.mode === 'opener') {
            await this.openerDialog(msg)
        } else {
            const text = msg.text
            await this.sendText('<b>–ü—Ä–∏–≤–µ—Ç!</b>')
            await this.sendText('<i>–ö–∞–∫ –¥–µ–ª–∞?</i>')
            await this.sendText(`–í—ã –ø–∏—Å–∞–ª–∏: ${text}`)
            await this.sendImage('avatar_main')
            await this.sendTextButtons('–ö–∞–∫–∞—è —É –≤–∞—Å —Ç–µ–º–∞ –≤ –¢–µ–ª–µ–≥—Ä–∞–º?', {
                'theme_light': '–°–≤–µ—Ç–ª–∞—è', 'theme_dark': '–¢–µ–º–Ω–∞—è'
            })
        }

    }

    async helloButton(callbackQuery) {
        const query = callbackQuery.data
        query === 'theme_light' ? await this.sendText('–£ –≤–∞—Å —Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞ ') : await this.sendText('–£ –≤–∞—Å —Ç—ë–º–Ω–∞—è —Ç–µ–º–∞')
    }

    async html(msg) {

        await this.sendHTML("<h3 style='color:red;'>–ü—Ä–∏–≤–µ—Ç</h3>", {theme: 'dark'})
        const html = this.loadHtml('main')
        await this.sendHTML(html, {theme: 'dark'})
    }
}

const chatGpt = new ChatGptService('')
const bot = new MyTelegramBot('');
bot.onCommand(/\/start/, bot.start) // /start
bot.onCommand(/\/html/, bot.html) // /html
bot.onCommand(/\/gpt/, bot.gpt) // /gpt
bot.onCommand(/\/date/, bot.date) // /date
bot.onCommand(/\/message/, bot.message) // /message
bot.onCommand(/\/profile/, bot.profile) // /message
bot.onCommand(/\/opener/, bot.opener) // /message
bot.onTextMessage(bot.hello)
bot.onButtonCallback(/^date_.*/, bot.dateButton) // data_*
bot.onButtonCallback(/^theme_.*/, bot.helloButton) // theme_*
bot.onButtonCallback(/^message_.*/, bot.messageButton) // any string

// –ú—ã –±—É–¥–µ–º –ø–∏—Å–∞—Ç—å —Ç—É—Ç –Ω–∞—à –∫–æ–¥